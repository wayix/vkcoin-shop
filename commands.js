const chunk = require('chunk')

const bot = require('./libs/vk.js');
const vkcoin = require('./libs/vkcoin.js');
const qiwi = require('./libs/qiwi.js');
const exchangeRates = require('./libs/exchangeRates.js');
const { qiwi: { phone } } = require('./libs/config.js');

const User = require('./models/users.js');
const Payment = require('./models/payments.js');

const { 
    privateKeyboard, redirectKeyboard, profileKeyboard, 
    cancelKeyboard, adminKeyboard
} = require('./utils/keyboard.js');
const { formate, utils } = require('./utils/functions.js');
const debug = require('./utils/debug.js');

module.exports = [	
    {
       tag: ['–Ω–∞—á–∞—Ç—å', '–º–µ–Ω—é'],
       button: ['start'],
       
       type: 'TYPE_PRIVATE',
       
       async execute(context, { thisUser }) {
           return await context.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã', { 
               keyboard: privateKeyboard(thisUser)
           })
       }
   },

    {
        tag: ['–∫—É–ø–∏—Ç—å'],
        button: ['buy'],
        
        type: 'TYPE_PRIVATE',
        
        async execute(context, { thisUser }) {
            const vkcoinBalance = await vkcoin.api.getMyBalance() / 1e3;
            const { text: amount } = await context.question(
                '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤ –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.\n\n' +
                `–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: ${exchangeRates.course.buy} ‚ÇΩ\n` + 
                `–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${utils.split(vkcoinBalance)} VKC`,
                { keyboard: cancelKeyboard }
            );

            if(!amount || isNaN(amount)) return await context.send('–î–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.', { keyboard: privateKeyboard(thisUser) });

            else if(amount > vkcoinBalance) return await context.send('–î–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–∏–Ω–æ–≤ —É –Ω–∞—Å –Ω–µ—Ç :(', { keyboard: privateKeyboard(thisUser) });
            
            const rubles = (+amount / 1e6 * exchangeRates.course.buy).toFixed(2);
            const shortUrl = (await bot.api.utils.getShortLink({ 
                url: `https://qiwi.com/payment/form/99?currency=643&extra[%27account%27]=${phone}&amountInteger=${rubles.toString().split('.')[0]}&amountFraction=00&extra[%27comment%27]comment=${context.senderId}&blocked[0]=comment&blocked[1]=account`
            })).short_url;

            return await context.send(
                '–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—Ç—å!\n\n' +
                `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${rubles} ‚ÇΩ\n` + 
                `–û–ø–ª–∞—Ç–∏—Ç—å: ${shortUrl}`,
                { 
                    keyboard: redirectKeyboard('–û–ø–ª–∞—Ç–∏—Ç—å', shortUrl)
                }
            );
        }
    },

    {
        tag: ['–ø—Ä–æ–¥–∞—Ç—å'],
        button: ['sell'],
        
        type: 'TYPE_PRIVATE',
        
        async execute(context, { thisUser }) {
            if(thisUser.qiwi) return context.send('–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–∏–Ω–æ–≤ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫.');

            const qiwiBalance = (await qiwi.getBalance()).accounts[0].balance.amount;
            const { text: amount } = await context.question(
                '–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤–≤–µ–¥–∏ —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤ –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—à—å –ø—Ä–æ–¥–∞—Ç—å.\n\n' +
                `–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: ${exchangeRates.course.sell} ‚ÇΩ\n` + 
                `–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${utils.split(qiwiBalance)} ‚ÇΩ (~${utils.split(qiwiBalance / exchangeRates.course.sell * 1e6)} VKC)`,
                { keyboard: cancelKeyboard }
            );
            
            if(!amount || isNaN(amount)) return await context.send('–î–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.', { keyboard: privateKeyboard(thisUser) });
            
            const rubles = (amount / 1e6 * exchangeRates.course.sell * 0.97).toFixed(2);

            if(rubles > qiwiBalance) return await context.send('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –Ω–µ –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ :(', { keyboard: privateKeyboard(thisUser) });
            else if(rubles < 1) return await context.send('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ 1 ‚ÇΩ', { keyboard: privateKeyboard(thisUser) });

            const url = await vkcoin.api.getLink(amount * 1000, true);
            const { short_url: shortUrl  } = await bot.api.utils.getShortLink({ 
                url
            });

            return await context.send(
                '–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–∏–Ω—ã!\n\n' +
                `–í–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${utils.split(rubles)} ‚ÇΩ\n` +
                `–û–ø–ª–∞—Ç–∏—Ç—å: ${shortUrl}`,
                { 
                    keyboard: redirectKeyboard('–û–ø–ª–∞—Ç–∏—Ç—å', shortUrl)
                }
            )
        }
    },

    {
        tag: ['–ø—Ä–æ—Ñ–∏–ª—å'],
        button: ['–ø—Ä–æ—Ñ–∏–ª—å'],

        type: 'TYPE_PRIVATE',

        async execute(context, { thisUser }) {
            return await context.send(
                '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n' + 
                `ID: ${thisUser.uid}\n` +
                `Qiwi-–∫–æ—à–µ–ª–µ–∫: ${thisUser.qiwi === '' ? '–ù–µ —É–∫–∞–∑–∞–Ω' : thisUser.qiwi}\n\n` +
                `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${thisUser.registerDate}`,
                { keyboard: profileKeyboard(thisUser) }
            )
        }
    },

    {
        tag: ['–∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', '—É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä'],
        button: ['–Ω–µ–≥—Ä—ã –ø–∏–¥–∞—Ä–∞—Å—ã'],
        
        type: 'TYPE_PRIVATE',
        
        async execute(context, { thisUser }) {
            let { text: phone } = await context.question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä Qiwi-–∫–æ—à–µ–ª—å–∫–∞', { keyboard: cancelKeyboard });

            phone = phone.match(/\d+/g).join(''); // tel-formater(phone); || —è –≤ –∞—Ö—É–µ 
            if(!phone || isNaN(phone)) return context.send('–î–ª—è –≤–≤–æ–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.', { keyboard: privateKeyboard(thisUser) });

            return await Promise.all([
                User.updateItem(thisUser.uid, { qiwi: Number(phone) }),
                context.send('–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.', { keyboard: privateKeyboard(thisUser) }) // –∞ –≤–¥—Ä—É–≥ –Ω–µ—Ç?
            ]);
        }
    },

    {
        tag: ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        button: ['information'],
        
        type: 'TYPE_PRIVATE',
        
        async execute(context, { }) {
            const [
                countUsers,
                payments,
                qiwiBalance,
                vkcoinBalance
            ] = await Promise.all([
                User.countDocuments(),
                Payment.find({}, { amount: 1 }).lean(),
                qiwi.getBalance(),
                vkcoin.api.getMyBalance()
            ]);
            const amountPayments = payments.map(payment => payment.amount);

            return await context.send(
                '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å:\n' +
                `‚ûñ –ü–æ–∫—É–ø–∫–∞: ${exchangeRates.course.buy}\n` +
                `‚ûñ –ü—Ä–æ–¥–∞–∂–∞: ${exchangeRates.course.sell}\n\n` +
                `–†–µ–∑–µ—Ä–≤:\n` +
                `Qiwi: ${utils.split(qiwiBalance.accounts[0].balance.amount)} ‚ÇΩ\n` +
                `VKCoin: ${utils.split(vkcoinBalance / 1e3)}\n\n` +
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: \n' +
                `–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: ${countUsers}\n` +
                `–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${utils.split(payments.length)} ‚ÇΩ\n` +
                `–û–±—â–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π: ${utils.split(amountPayments)}\n`
            )
        }
    },

    {
        tag: ['–ø–∞–Ω–µ–ª—å'],
        button: ['start'],
        
        type: 'TYPE_PRIVATE',
        
        async execute(context, { thisUser }) {
            if(!thisUser.isAdmin) return;

            return await context.send('–ü–∞–Ω–µ–ª—å:', { 
                keyboard: adminKeyboard
            })
        }
    },

    {
        tag: ['settings'],
        button: ['settings'],

        type: 'TYPE_PRIVATE',

        async execute(context, { thisUser, command }) {
            if(!thisUser.isAdmin) return;
            const args = command.text.split('_')

            if(args[1] === 'course') {
                const { text: amount } = await context.question(
                    '–í–≤–µ–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å\n' +
                    `–°–µ–π—á–∞—Å: ${exchangeRates.course[args[2]]}`,
                    { keyboard: cancelKeyboard }
                );

                if(isNaN(amount)) return context.send('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º', { keyboard: adminKeyboard });

                exchangeRates.edit(args[2], amount);
                return await context.send(
                    '–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
                    { keyboard: adminKeyboard }
                )
            }

            else if(args[1] === 'bulkMessaging') {
                const { text: message } = await context.question('–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º', { keyboard: cancelKeyboard });
                if(message === '–û—Ç–º–µ–Ω–∏—Ç—å') return context.send('–ü–∞–Ω–µ–ª—å:', { keyboard: adminKeyboard });

                let attachments = await context.question('–û—Ç–ø—Ä–∞–≤—å –≤–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å')
                if(attachments.text === '–û—Ç–º–µ–Ω–∏—Ç—å') return context.send('–ü–∞–Ω–µ–ª—å:', { keyboard: adminKeyboard });

                attachments = formate.attachments(attachments);

                process.nextTick(async () => {
                    const startTime = new Date().getTime();
                    const users = await User.find({ isMessages: { $eq: true } }, { uid: 1 }).lean();
                    const peerIds = users
                    .map(item => (
                      item.uid
                    )); // –≤–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è?
                    
                    await context.send(
                        '–Æ–∑–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã\n\n' +
                        `–Æ–∑–µ—Ä–æ–≤: ${peerIds.length}\n` + 
                        `–í—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${formate.seconds((new Date().getTime() - startTime) / 1000)}`,
                        { keyboard: adminKeyboard }
                    );
                    let sentToUsers = 0;

                    for (const userIds of chunk(peerIds, 50)) {
                        try {
                            await bot.api.messages.send({
                                user_ids: userIds.join(','),
                                message: message,
                                attachment: attachments,
                                random_id: utils.random.integer(-2e9, 2e9)
                            })
                          sentToUsers += userIds.length;
                        } 
                        
                        catch (error) {
                            console.log('[ –†–∞—Å—Å—ã–ª–∫–∞ | –û—à–∏–±–∫–∞ ] \n' + error.message);
                        }
                    }

                    const endTime = (new Date().getTime() - startTime) / 1000;

                    return await context.send(
                        '–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–∫–æ–Ω—á–µ–Ω–∞—è —Å –Ω–æ–≥ –¥–æ –≥–æ–ª–æ–≤—ã\n\n' +
                        `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: ${formate.seconds(endTime)}\n` + 
                        `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${sentToUsers}`
                    )
                })
            }

            else if(args[1] === 'debug') {
                const getTextDebug = await debug();
                return await context.send(getTextDebug)
            }
        }
    }
]
